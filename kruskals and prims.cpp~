#include <iostream>
#include <cstdlib>
#include <cstring>	// NULL
#include <climits>	// INT_MAX

using namespace std;


struct AdjList{
  int myNum;
  AdjList *next;
};

struct Edge{
    int src;
    int dest;
    int weight;
};



class Graph{
  public:
    int vertices;	// Number of vertices in the graph
    int edges;		// Number of edges in the graph
  
    Edge* edge;

    void add_node(const int node, int src, int dest, int w){
      edge[node].src = src;
      edge[node].dest = dest;
      edge[node].weight = w;
    }

  int get_vertices(){ return vertices; }
  int get_edges() { return edges; }
  Edge* get_edge(){ return edge; }
  Edge get_single_edge(int num){ return edge[num]; }
};



struct Graph* create_graph(int v, int e){
  Graph* graph = (Graph*)malloc(sizeof(Graph));

  graph->vertices = v;
  graph->edges = e;
  
  graph->edge = (Edge*)malloc(graph->edges * sizeof(Edge));

  return graph;
}



struct Subtree{
  int head;
  int numElements;
};


struct PrimHelper{
  int key;
  int parent;
};



// **************************************************************

int find(Subtree subtrees[], int findMe);
void Union(Subtree subtrees[], int v1, int v2);
int Compare(const void * a, const void * b);
void Kruskals(Graph* graph);
void Prims(Graph* graph);

// **************************************************************



int main(){
  int numV = 5;
  int numE = 7;
  Graph *g = create_graph(numV, numE);
  
/*
  g->edge[0].src = 1;
  g->edge[0].dest = 2;
  g->edge[0].weight = 5;


  g->edge[1].src = 1;
  g->edge[1].dest = 3;
  g->edge[1].weight = 9;

  g->edge[2].src = 1;
  g->edge[2].dest = 5;
  g->edge[2].weight = 7;

  g->edge[3].src = 2;
  g->edge[3].dest = 3;
  g->edge[3].weight = 4;

  g->edge[4].src = 3;
  g->edge[4].dest = 4;
  g->edge[4].weight = 2;

  g->edge[5].src = 3;
  g->edge[5].dest = 5;
  g->edge[5].weight = 2;

  g->edge[6].src = 4;
  g->edge[6].dest = 5;
  g->edge[6].weight = 1;
*/

/*
       (2)
    5 /   \ 4
     /     \
   (1)--9--(3)
    |      /|
    |    /  |
    7   2   2
    |  /    |
    |/      |
   (4)--1--(5)
        

*/

  g->add_node(0, 1, 2, 5);
  g->add_node(1, 1, 3, 9);
  g->add_node(2, 1, 5, 7);
  g->add_node(3, 2, 3, 4);
  g->add_node(4, 3, 4, 2);
  g->add_node(5, 3, 5, 2);
  g->add_node(6, 4, 5, 1);
  

  Kruskals(g);
//  Prims(g);

  return 0;
}


void Kruskals(Graph* graph){
  int src;
  int dest;
  int weight;
  
  


}

void Prims(Graph* graph){
  AdjList visited;
  AdjList 
  
  
}
