#include <iostream>

using namespace std;


struct Edge{
  int src;
  int dest;
  int weight;
};

class Graph{
  private:
    int vertices;
    int edges;
  
    Edge* edge;

  public:
    
    Graph* create_graph(int v, int e){
      Graph* graph = new Graph;
       
      graph->vertices = v;
      graph->edges = e;
      
      return graph;
    }

};

struct Subtree{
  int head;
  int numElements;
};


int main(){


  return 0;
}


int find(Subtree subtrees[], int findMe) {
  if(subtrees[findMe].head != findMe)
    subtrees[findMe].head = find(subtrees, subtrees[findMe].head);
    
  return subtrees[findMe].head;
}

void Union(Subtree subtrees[], int v1, int v2){
  int vt1 = find(subtrees, v1);
  int vt2 = find(subtrees, v2);

  // Find the tree with the lower amount of elements and combine it to the bigger one
  if(subtree[vt1].numElements < subtree[vt2].numElements){
    subtrees[vt1].head = vt2
  }
  
  else if(subtree[vt1].numElements > subtree[vt2].numElements){
    subtrees[vt2].head = vt1
  }
  
  else {
    subtrees[vt1].head = vt2;
    subtrees[vt2].numElements++;
  }
  

}
